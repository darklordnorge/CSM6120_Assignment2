.TH "SearchTree.TreeNode" 3 "Sun Nov 30 2014" "Version 1.0" "CSM6120 Assignment" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SearchTree.TreeNode \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTreeNode\fP (\fBState\fP s)"
.br
.ti -1c
.RI "\fBTreeNode\fP (\fBTreeNode\fP t)"
.br
.ti -1c
.RI "void \fBaddChild\fP (\fBTreeNode\fP child)"
.br
.ti -1c
.RI "void \fBaddSibling\fP (\fBTreeNode\fP sibling)"
.br
.ti -1c
.RI "\fBState\fP \fBgetState\fP ()"
.br
.ti -1c
.RI "\fBTreeNode\fP \fBgetFirstChild\fP ()"
.br
.ti -1c
.RI "\fBTreeNode\fP \fBgetFirstSibling\fP ()"
.br
.ti -1c
.RI "boolean \fBsiblingIsEmpty\fP ()"
.br
.ti -1c
.RI "boolean \fBchildrenIsEmpty\fP ()"
.br
.ti -1c
.RI "\fBTreeNode\fP \fBpeekChild\fP ()"
.br
.ti -1c
.RI "void \fBremoveFirstChild\fP ()"
.br
.ti -1c
.RI "void \fBsetExplored\fP (boolean b)"
.br
.ti -1c
.RI "boolean \fBgetExplored\fP ()"
.br
.ti -1c
.RI "int \fBgetNumOfChildren\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class represents a node in the search tree/graph
.PP
\fBAuthor:\fP
.RS 4
stefan 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "SearchTree\&.TreeNode\&.TreeNode (\fBState\fPs)"
Constructor of the \fBTreeNode\fP class\&. Creates a deep copy of the state which is passed as parameter Initialises the linkedLists\&.
.PP
\fBParameters:\fP
.RS 4
\fIs\fP The State the node referes too 
.RE
.PP

.SS "SearchTree\&.TreeNode\&.TreeNode (\fBTreeNode\fPt)"
Constructor of the \fBTreeNode\fP class\&. Creates a deep copy of another \fBTreeNode\fP object\&.
.PP
\fBParameters:\fP
.RS 4
\fIt\fP The \fBTreeNode\fP object this instance is a copy off 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void SearchTree\&.TreeNode\&.addChild (\fBTreeNode\fPchild)"
Method to add a child to the linkedList
.PP
\fBParameters:\fP
.RS 4
\fIchild\fP The \fBTreeNode\fP object to add to the children list 
.RE
.PP

.SS "void SearchTree\&.TreeNode\&.addSibling (\fBTreeNode\fPsibling)"
Method to add a sibling to the linkedList of siblings
.PP
\fBParameters:\fP
.RS 4
\fIsibling\fP The \fBTreeNode\fP object to add to the siblings list 
.RE
.PP

.SS "boolean SearchTree\&.TreeNode\&.childrenIsEmpty ()"
Method to check if the \fBTreeNode\fP object has children\&. Returns true if the linkedList is empty
.PP
\fBReturns:\fP
.RS 4
Boolean 'True' if the list is empty 
.RE
.PP

.SS "boolean SearchTree\&.TreeNode\&.getExplored ()"
Method to get the 'explored' variable of the object
.PP
\fBReturns:\fP
.RS 4
The boolean value of 'explored' 
.RE
.PP

.SS "\fBTreeNode\fP SearchTree\&.TreeNode\&.getFirstChild ()"
Method to return(poll) and remove the first element of the 'Children' linkedList
.PP
\fBReturns:\fP
.RS 4
The head of the 'children' linkedList 
.RE
.PP

.SS "\fBTreeNode\fP SearchTree\&.TreeNode\&.getFirstSibling ()"
Method to return(poll) and remove the first element of the 'siblings' linkedList
.PP
\fBReturns:\fP
.RS 4
The head of the 'siblings' linkedList 
.RE
.PP

.SS "int SearchTree\&.TreeNode\&.getNumOfChildren ()"
Method to return the size of the 'children' linkedList
.PP
\fBReturns:\fP
.RS 4
The size of the List 
.RE
.PP

.SS "\fBState\fP SearchTree\&.TreeNode\&.getState ()"
Method to return the state of the node object
.PP
\fBReturns:\fP
.RS 4
the State object of the node 
.RE
.PP

.SS "\fBTreeNode\fP SearchTree\&.TreeNode\&.peekChild ()"
Method to peek(return but not remove) the head of the 'children' linkedList
.PP
\fBReturns:\fP
.RS 4
The head of the 'children' LinkedList 
.RE
.PP

.SS "void SearchTree\&.TreeNode\&.removeFirstChild ()"
Method to remove the head of the children linkedList 
.SS "void SearchTree\&.TreeNode\&.setExplored (booleanb)"
Method to set the 'explored' variable of the object
.PP
\fBParameters:\fP
.RS 4
\fIb\fP The boolean value to set 
.RE
.PP

.SS "boolean SearchTree\&.TreeNode\&.siblingIsEmpty ()"
Method to check if the \fBTreeNode\fP object has siblings\&. Returns true if the linkedList is empty
.PP
\fBReturns:\fP
.RS 4
Boolean 'True' if the list is empty 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for CSM6120 Assignment from the source code\&.
